_id: 1039935536
_parent: http://chester.me/archives/2007/02/linguagens_de_p.html
replying_to_uid: ''
message: '<p>  Só para constar eu escrevo compiladores e interpretadores a mais de vinte anos.<br><br>Achei este post muito interesssante e esclarecedor.<br><br>O que tenho a acressentar é que os paradigmas(modelos) de programação aqui apresentados não são os únicos existêntes porém(por razões historio´econômicas) são os mais utilizados.<br><br>Todos esses modelos evoluíram á partir dos primeiros microprocessadores onde a linguagem é conhecida como código de máquina; essa linguagem é de numérica binária, organizada por endereços inteiros continuos e seus respectivos valores, alguns registradores de estados, além de ser de difícil compreênção para nós humanos; caracteriza-se por sua linearida(estou falando dos primeiros processadores) ou seja apenas uma instrução por vez pode ser executada em sequüencia não existindo nenhum conceito de subrotina ou função. Para simplificar a programação muitos ciêntistas computacionais associavam uma tabela de mneumônicos(apelidos) para cada instrução de máquina...nascia o Assembly. <br><br>Esse Assembly, apesar de simplificar a vida de nossos acestrais programadores, era e ainda é muito improdutivo; então foram iniciada a procura por uma linguagem que pudesse ser convertida em código de máquina e que fosse de razoável compreeção. As linguagens ai descobertas mantinham as mesmas caracteristicas lineares do código de máquina porém tinham uma sintaxe muito mais clara(gaças a tipagem) e a essas linguagens chamamos de "linguagens imperativas"(C, ADA, Fortran, Forth).<br><br>As linguagems declarativas foram criadas na mesma época que as imperativas, a principar diferença é de que as linguagens declarativas não tentem imitar a estrutura dos processadores e sim buscar soluções para um problema baseado em um conjunto de premissas introduzidos pelo úsuário(Prolog, SQL, Mercury).<br><br>Já as linguagens funcionáis elas partem do modelo estruturado de programação onde todos os elementos que caracterizam linguagens imperativas e/ou declarativas estão presentes porém fora adicionado o conceito de funções, que nada mais é que uma subrotina do programa, identificada e que possa ser chamada a qualquer momento após sua declaração ou prototipagem e que possa retornar ou não um valor(Lisp, ECMAScript).<br><br>O Modelo orientado a objetos tende a trabalhar os dados e não o estado de funcionalidade da máquina, ele enfoca a estrutura dos dados assim como o comportamento dessas estruturas gerando assim uma identidade a qual é denominda classe e a implementação dessas classes chama-se objeto(SmallTalk).<br><br>Linguagens como Java, VC++, C#, Visual Basic ou Delphi são linguagens de difícil classificação pois são multiparadigmas.<br><br>E os atuáis sistemas operacionais trabalham com um paradigma chamado de linguagem simbólica onde cada simbolo corresponde a uma ação ou objeto; esse grupo de símbolos pode ser redefinido a qualquer momento pelo usuário fazendo com que não exista um padrão uniforme de valores definidos para os símbolos(Windows, MacOS, X11)<br><br></p>'
name: 'Ronaldo Augusto Vasques de Sou'
email: '4aedc3bea326ae3e2fe3a49b10e73457'
hp: ''
date: 1202175488
            