_id: 1039935527
_parent: http://chester.me/archives/2007/02/linguagens_de_p.html
replying_to_uid: ''
message: '<p>Helton,</p><p></p><p></p><p>É curioso notar que essas questões sobre uso prático, linguagens/implementações viáveis e tópicos assemelhados também surgiram quando o paradigma OO começou a sair da academia e aparecer no mundo corporativo. Não estou sugerindo que o paradigma funcional será absorvido com a mesma pervasividade, mas é interessante observar este paralelo.</p><p></p><p></p><p>Outra semelhança "social" com o OO na década de 80/90 é a aparente negação de conceitos tidos como fundamentais em computação (negação esta que torna muito difícil a transição para pessoas com mais tempo na área). No caso do OO, o conceito arraigado era a divisão clara entre programa e dados, e no da funcional é a computação centrada na mudança de estados.</p><p></p><p></p><p>Até onde sei, o uso em sistemas comerciais ainda é muito limitado (o caso do Google é emblemático, mas um pouco fora da realidade corporativa). Isso acontece porque uma das maiores vantagens do paradigma funcional é aproveitar sistemas massivamente paralelos(*) - que ainda são poucos e caros, mas a anunciada "explosão dos cores", sob o efeito da Lei de Moore, acena para um futuro onde "paralelizável" se torne uma meta tão importante quanto "escalável" ou "performático".</p><p></p><p></p><p>(*) é preciso estudar um pouco o assunto para entender essa relação, mas, resumidamente, tem a ver com a minimização do papel do estado (ambientes funcionais mais "puros" chegam a extremos tais como abrir mão do operador de atribuição). Esta minimização anula os chamados "efeitos colaterais", permitindo que operações que, num ambiente imperativo, dependiam da ordem de execução, possam ser executadas em paralelo.</p>'
name: 'Chester'
email: '4aedc3bea326ae3e2fe3a49b10e73457'
hp: ''
date: 1170890962
            